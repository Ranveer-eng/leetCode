/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 //Approach 1
 //Elementary Math Approach
 //Time-Complexity O(max(length l1, length l2));
 
class Solution {
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null){
            return l2;
        }else if(l2 == null){
            return l1;
        }
        ListNode first = null;
        ListNode second = null;
        ListNode third = null;
        int sum = 0;
        int carry = 0;
        while(l1 != null || l2 != null){
            sum = carry + (l1 != null ? l1.val : 0) + (l2 != null ? l2.val : 0);
            
            carry = sum >= 10 ? 1 : 0;
            
            sum = sum%10;
            
            first = new ListNode(sum);
            
            if(third == null){
                third = first;
            }else{
                second.next = first;
            }
            
            second = first;
            
            if(l1 != null){
                l1 = l1.next;
            }
            if(l2 != null){
                l2 = l2.next;
            }
            
        }
        if(carry > 0){
            first.next = new ListNode(carry);
            
        }
        return third;
        
    }
}


//Recursive Approach
//Both Approach Time complexity is same O(max(m,n));



	public class AddNumbersLinkedList 
	{
	    private class ListNode
	    {
	        int value;
	        ListNode next;
	
	        ListNode(int value)
	        {
	            this.value = value;
	        }
	    }
	    
	    ListNode head;
	    
	     
	    private ListNode appendNode(ListNode currentNode, ListNode newNode)
	    {
	        if (currentNode == null)
	        {
	            return newNode;
	        }
	        
	        currentNode.next = newNode;
	        return newNode;
	    }
	    
	     
	    private void addNode(int value)
	    {
	        if (head == null)
	        {
	            head = new ListNode(value);
	            return;
	        }
	        
	        ListNode n = new ListNode(value);
	        n.next = head;
	        head   = n;
	    }
	    
	     
	    public ListNode createLinkedList(int[] number)
	    {
	         
	         
	        if (head != null)
	        {
	            head = null;
	        }
	        
	        if (number != null)
	        {
	            for (int i = 0; i < number.length; i++)
	            {
	                addNode(number[i]);
	            }
	        }
	        
	        return head;
	    }
	    
	    public void printList(ListNode head)
	    {
	        ListNode temp = head;
	        
	        while (temp != null)
	        {
	            System.out.print(temp.value + "->" );
	            temp = temp.next;
	        }
	        System.out.print("null" );
	    }
	    
	     
	    private ListNode addListsRecursive(ListNode node1, ListNode node2, int carry)
	    {
	         
	        if (node1 == null && node2 == null)
	        {
	            if (carry > 0)
	            {
	                return new ListNode(carry);
	            }
	            return null;
	        }
	        
	         
	        int value1 = (node1 != null) ? node1.value : 0;
	        int value2 = (node2 != null) ? node2.value : 0;
	        
	         
	        int sum = (value1 + value2 + carry) % 10;
	        carry   = (value1 + value2 + carry) / 10;
	        
	         
	        ListNode currentHead = new ListNode(sum);
	        
	         
	        ListNode node1Next = (node1 != null) ? node1.next : null;
	        ListNode node2Next = (node2 != null) ? node2.next : null;
	
	         
	         
	        currentHead.next = addListsRecursive(node1Next, node2Next, carry);
	        
	        return currentHead;
	    }
	    
	    private ListNode addListsIterative(ListNode node1, ListNode node2)
	    {
	         
	        ListNode result = createLinkedList(null);
	        
	         
	        ListNode tempTail = result; 
	
	        int sum = 0, carry = 0;
	        while ((node1 != null) || (node2 != null))
	        {
	             
	            int value1 = (node1 != null) ? node1.value : 0;
	            int value2 = (node2 != null) ? node2.value : 0;
	
	             
	            sum = (value1 + value2 + carry) % 10;
	            carry   = (value1 + value2 + carry) / 10;
	
	             
	            tempTail = appendNode(tempTail, new ListNode(sum));
	            
	             
	             
	            if (result == null)  
	            {
	                result = tempTail;
	            }
	            
	             
	            if (node1 != null)
	            {
	                node1 = node1.next;
	            }
	            
	            if (node2 != null)
	            {
	                node2 = node2.next;
	            }
	        }
	        
	        if (carry > 0)
	        {
	            tempTail = appendNode(tempTail, new ListNode(carry));
	        }
	        
	        return result;
	    }
	    
	    public ListNode addLists(ListNode node1, ListNode node2)
	    {
	        return addListsRecursive(node1, node2, 0);
	    }
	    
	    
	    public static void main(String[] args) 
	    {
	        AddNumbersLinkedList solution = new AddNumbersLinkedList();
	
	        int[] firstNumber  = {9,9,9,7,1};  
	        int[] secondNumber = {9,9,8};  
	        
	         
	        ListNode head1 = solution.createLinkedList(firstNumber);
	        
	         
	        ListNode head2 = solution.createLinkedList(secondNumber);
	        
	        ListNode result = solution.addLists(head1, head2);
	        
	        System.out.print("Resultant sum represented as a linked list is: \n" );
	        solution.printList(result);
    }
}



