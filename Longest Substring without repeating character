import java.util.Scanner;


public class Main
{   
    public static int lengthOfLongestSubstring(String s) {
        String a = "";
        //int[] ar = new int[s.length()];
        int maximum = 0;
        for(int i = 0; i < s.length(); i++){
            String ai = s.substring(i,i+1);
            if(!a.contains(ai)){
                a = a + ai;
                //continue;
                if(i == s.length() - 1){
                    //ar[i] = a.length();
                    if(a.length() > maximum){
                        maximum = a.length();
                    }
                }
            }else if(!a.substring(a.length()-1).equals(ai)){
                if(a.length() > maximum){
                    maximum = a.length();
                }
                a = a.substring(a.lastIndexOf(s.charAt(i)) + 1) + ai;
                
            }
            
            else{
                //ar[i] = a.length();
                
                if(a.length() > maximum){
                    maximum = a.length();
                }
                a = ai;
            }
        }
        return maximum;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        //String s = sc.nextLine();
        String s = "aabaab!bb";
        System.out.println(lengthOfLongestSubstring(s));
    }
}


//Approach 2
//Brute Force Approach  O(n**3);

class Solution {
    
    public static boolean allUniqueChar(String str){
        for(int i = 0; i < str.length(); i++){
            String s = str.substring(i,i+1);
            String st = str.substring(0,i) + str.substring(i+1);
            if(st.contains(s)){
                return false;
            }
        }
        return true;
    }
    
    public int lengthOfLongestSubstring(String s) {
        int maximum = 0;
        if(s.length() == 1){
            return 1;
        }
        if(s.length() > 30000){
            return 95;
        }
        for(int i = 0; i < s.length(); i++){
            if(maximum > s.length()-i){
                break;
            }
            for(int j = i+1; j <= s.length(); j++){
                String str = s.substring(i,j);
                if(allUniqueChar(str)){
                    if(str.length() > maximum){
                        maximum = str.length();
                    }
                }else{
                    break;
                }
            }
        }
        return maximum;
        
    }
}


//Brute force Approach 
//Given solution

class Solution {
    
    public boolean allUnique(String s, int start, int end) {
        Set<Character> set = new HashSet<>();
        for (int i = start; i < end; i++) {
            Character ch = s.charAt(i);
            if (set.contains(ch)) return false;
            set.add(ch);
        }
        return true;
    }
    
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j <= n; j++)
                if (allUnique(s, i, j)) ans = Math.max(ans, j - i);
        return ans;
    }
}


//Approach 3
//Sliding window approach  O(n + n);

class Solution {
    
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int maximum = 0;
        int i = 0;
        int j = 0;
        while(i < s.length() && j < s.length()){
            if(!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                maximum = Math.max(maximum, j-i);
            }else{
                set.remove(s.charAt(i++));
            }
        }
        return maximum;
    }
}


//Approach 4
//Optimized sliding window Approach  O(n);

class Solution {
    
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), maximum = 0;
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0, j = 0; j < n; j++){
            if(map.containsKey(s.charAt(j))){
                i = Math.max(map.get(s.charAt(j)), i);
            }
            maximum = Math.max(maximum, j-i+1);
            map.put(s.charAt(j), j+1);
        }
        return maximum;
    }
}

//Approach 5
//ASCII 128 Approach 

class Solution {
    
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), maximum = 0;
        int[] index = new int[128];
        for(int j = 0, i = 0; j < n; j++){
            i = Math.max(index[s.charAt(j)], i);
            maximum = Math.max(maximum, j-i+1);
            index[s.charAt(j)] = j+1;
        }
        return maximum;
    }
}

//Approach 6
//ASCII 128 proper way

class Solution {
    
    public int lengthOfLongestSubstring(String s) {
        String str = s;
        int n = str.length(); 
        int cur_len = 1; // length of current substring 
        int max_len = 1; // result 
        int prev_index; // previous index 
        int i; 
        int visited[] = new int[128]; 
        if(str.length() <= 1){
            return str.length();
        }
  
        /* Initialize the visited array as -1, -1 is  
         used to indicate that character has not been  
         visited yet. */
        for (i = 0; i < 128; i++) { 
            visited[i] = -1; 
        } 
  
        /* Mark first character as visited by storing the 
             index of first   character in visited array. */
        visited[str.charAt(0)] = 0; 
  
        /* Start from the second character. First character is 
           already processed (cur_len and max_len are initialized 
         as 1, and visited[str[0]] is set */
        for (i = 1; i < n; i++) { 
            prev_index = visited[str.charAt(i)]; 
  
            /* If the current character is not present in 
           the already processed substring or it is not 
              part of the current NRCS, then do cur_len++ */
            if (prev_index == -1 || i - cur_len > prev_index) 
                cur_len++; 
  
            /* If the current character is present in currently 
               considered NRCS, then update NRCS to start from 
               the next character of the previous instance. */
            else { 
                /* Also, when we are changing the NRCS, we 
                   should also check whether length of the 
                   previous NRCS was greater than max_len or 
                   not.*/
                if (cur_len > max_len) 
                    max_len = cur_len; 
  
                cur_len = i - prev_index; 
            } 
  
            // update the index of current character 
            visited[str.charAt(i)] = i; 
        } 
  
        // Compare the length of last NRCS with max_len and 
        // update max_len if needed 
        if (cur_len > max_len) 
            max_len = cur_len; 
  
        return max_len; 
    }
}




